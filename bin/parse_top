#!/usr/bin/env ruby
#vim:ft=ruby

$:.push File.dirname( File.realpath( __FILE__) ) + "/../lib"

require 'parser/top'
require 'csv'

top = nil


#process sample to an easy output result

step = 0
header = [ "pid", "seconds" ] #Head column: pid, seconds, 1, 2, 3, 4, 4 ,5 ,6
totals = [ "-1", "total" ]    #Total column: -1, total,   x ,x ,x
# iowait = [ "-2", "iowait" ]   #Iowait column:-2, iowait,  x, x, x, x
data = { "-1"=>totals }       #data: pid=>[x, x, x, x, x, x ]
max_value = {}                #maxvalue: pid=>max_value

File.open ARGV[0] do |rh|
    top = Parser::Top.new(rh)
    top.parse do |sample|
        header << step
        total = 0
        sample.pids.each do |pid_stat|
            values = data[ pid_stat["PID"] ] 
            if values.nil?
                values = [ pid_stat["PID"], pid_stat["COMMAND"] ]
                data[ pid_stat[ "PID" ] ] = values
                max_value[ pid_stat[ "PID" ] ] = 0
            end

            values.length.upto( header.length - 2 ) do 
                values << -0.1 #using negative indicate missing
            end

            values << pid_stat["%CPU"].to_f #/ 100

            total += values.last

            if values.last > max_value[ pid_stat[ "PID" ] ]
                max_value[ pid_stat[ "PID"] ] = values.last
            end
        end
        totals << total
        # iowait << sample.cpu["io"].chop.strip.to_f #/ 100
        step += 1
    end
end


max_value.each_pair do |key,value|
    if( value < 5 )
        data.delete key
    end
end

values = data.values

exit

CSV.open(ARGV[1], "wb") do |csv|
    0.upto(header.length - 1 ) do |i|
        row = []
        row << header[i]
        values.each do |value|
            row << value[i]
        end
        csv << row
    end

end


